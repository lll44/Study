/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

const getLineStartPos = (line) => ({
    line,
    ch: 0,
});
const getLineEndPos = (line, editor) => ({
    line,
    ch: editor.getLine(line).length,
});
const getSelectionBoundaries = (selection) => {
    let { anchor: from, head: to } = selection;
    // in case user selects upwards
    if (from.line > to.line) {
        [from, to] = [to, from];
    }
    return { from, to };
};
const getLeadingWhitespace = (lineContent) => {
    const indentation = lineContent.match(/^\s+/);
    return indentation ? indentation[0] : '';
};
const isWordCharacter = (char) => /\w/.test(char);
const wordRangeAtPos = (pos, lineContent) => {
    let start = pos.ch;
    let end = pos.ch;
    while (start > 0 && isWordCharacter(lineContent.charAt(start - 1))) {
        start--;
    }
    while (end < lineContent.length && isWordCharacter(lineContent.charAt(end))) {
        end++;
    }
    return {
        anchor: {
            line: pos.line,
            ch: start,
        },
        head: {
            line: pos.line,
            ch: end,
        },
    };
};

var CASE;
(function (CASE) {
    CASE["UPPER"] = "upper";
    CASE["LOWER"] = "lower";
    CASE["TITLE"] = "title";
})(CASE || (CASE = {}));
const LOWERCASE_ARTICLES = ['the', 'a', 'an'];

const insertLineAbove = (editor) => {
    const { line } = editor.getCursor();
    const startOfCurrentLine = getLineStartPos(line);
    editor.replaceRange('\n', startOfCurrentLine);
    editor.setSelection(startOfCurrentLine);
};
const insertLineBelow = (editor) => {
    const { line } = editor.getCursor();
    const endOfCurrentLine = getLineEndPos(line, editor);
    const indentation = getLeadingWhitespace(editor.getLine(line));
    editor.replaceRange('\n' + indentation, endOfCurrentLine);
    editor.setSelection({ line: line + 1, ch: indentation.length });
};
const deleteSelectedLines = (editor) => {
    const selections = editor.listSelections();
    if (selections.length === 0) {
        return;
    }
    const { from, to } = getSelectionBoundaries(selections[0]);
    const startOfCurrentLine = getLineStartPos(from.line);
    const startOfNextLine = getLineStartPos(to.line + 1);
    editor.replaceRange('', startOfCurrentLine, startOfNextLine);
};
const joinLines = (editor) => {
    const { line } = editor.getCursor();
    const contentsOfNextLine = editor.getLine(line + 1).trimStart();
    const endOfCurrentLine = getLineEndPos(line, editor);
    const endOfNextLine = getLineEndPos(line + 1, editor);
    editor.replaceRange(contentsOfNextLine.length > 0
        ? ' ' + contentsOfNextLine
        : contentsOfNextLine, endOfCurrentLine, endOfNextLine);
    editor.setSelection(endOfCurrentLine);
};
const duplicateLine = (editor) => {
    const selections = editor.listSelections();
    if (selections.length === 0) {
        return;
    }
    const { from, to } = getSelectionBoundaries(selections[0]);
    const fromLineStart = getLineStartPos(from.line);
    const toLineEnd = getLineEndPos(to.line, editor);
    const contentsOfSelectedLines = editor.getRange(fromLineStart, toLineEnd);
    editor.replaceRange(contentsOfSelectedLines + '\n', fromLineStart);
};
const selectLine = (editor) => {
    const selections = editor.listSelections();
    if (selections.length === 0) {
        return;
    }
    const { from, to } = getSelectionBoundaries(selections[0]);
    const startOfCurrentLine = getLineStartPos(from.line);
    // if a line is already selected, expand the selection to the next line
    const startOfNextLine = getLineStartPos(to.line + 1);
    editor.setSelection(startOfCurrentLine, startOfNextLine);
};
const goToLineBoundary = (editor, boundary) => {
    const { line } = editor.getCursor('from');
    editor.setSelection(boundary === 'start' ? getLineStartPos(line) : getLineEndPos(line, editor));
};
const transformCase = (editor, caseType) => {
    const originalSelections = editor.listSelections();
    let selectedText = editor.getSelection();
    // apply transform on word at cursor if nothing is selected
    if (selectedText.length === 0) {
        const pos = editor.getCursor('from');
        const { anchor, head } = wordRangeAtPos(pos, editor.getLine(pos.line));
        editor.setSelection(anchor, head);
        selectedText = editor.getRange(anchor, head);
    }
    if (caseType === CASE.TITLE) {
        editor.replaceSelection(
        // use capture group to join with the same separator used to split
        selectedText
            .split(/(\s+)/)
            .map((word, index, allWords) => {
            if (index > 0 &&
                index < allWords.length - 1 &&
                LOWERCASE_ARTICLES.includes(word)) {
                return word;
            }
            return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
        })
            .join(''));
    }
    else {
        editor.replaceSelection(caseType === CASE.UPPER
            ? selectedText.toUpperCase()
            : selectedText.toLowerCase());
    }
    // restore original selection after replacing content
    if (originalSelections.length > 0) {
        const { anchor, head } = originalSelections[0];
        editor.setSelection(anchor, head);
    }
};

class CodeEditorShortcuts extends obsidian.Plugin {
    onload() {
        this.addCommand({
            id: 'insertLineAbove',
            name: 'Insert line above',
            hotkeys: [
                {
                    modifiers: ['Mod', 'Shift'],
                    key: 'Enter',
                },
            ],
            editorCallback: (editor) => insertLineAbove(editor),
        });
        this.addCommand({
            id: 'insertLineBelow',
            name: 'Insert line below',
            hotkeys: [
                {
                    modifiers: ['Mod'],
                    key: 'Enter',
                },
            ],
            editorCallback: (editor) => insertLineBelow(editor),
        });
        this.addCommand({
            id: 'deleteLine',
            name: 'Delete line',
            hotkeys: [
                {
                    modifiers: ['Mod', 'Shift'],
                    key: 'K',
                },
            ],
            editorCallback: (editor) => deleteSelectedLines(editor),
        });
        this.addCommand({
            id: 'joinLines',
            name: 'Join lines',
            hotkeys: [
                {
                    modifiers: ['Mod'],
                    key: 'J',
                },
            ],
            editorCallback: (editor) => joinLines(editor),
        });
        this.addCommand({
            id: 'duplicateLine',
            name: 'Duplicate line',
            hotkeys: [
                {
                    modifiers: ['Mod', 'Shift'],
                    key: 'D',
                },
            ],
            editorCallback: (editor) => duplicateLine(editor),
        });
        this.addCommand({
            id: 'selectLine',
            name: 'Select line',
            hotkeys: [
                {
                    modifiers: ['Mod'],
                    key: 'L',
                },
            ],
            editorCallback: (editor) => selectLine(editor),
        });
        this.addCommand({
            id: 'goToLineStart',
            name: 'Go to start of line',
            editorCallback: (editor) => goToLineBoundary(editor, 'start'),
        });
        this.addCommand({
            id: 'goToLineEnd',
            name: 'Go to end of line',
            editorCallback: (editor) => goToLineBoundary(editor, 'end'),
        });
        this.addCommand({
            id: 'transformToUppercase',
            name: 'Transform selection to uppercase',
            editorCallback: (editor) => transformCase(editor, CASE.UPPER),
        });
        this.addCommand({
            id: 'transformToLowercase',
            name: 'Transform selection to lowercase',
            editorCallback: (editor) => transformCase(editor, CASE.LOWER),
        });
        this.addCommand({
            id: 'transformToTitlecase',
            name: 'Transform selection to title case',
            editorCallback: (editor) => transformCase(editor, CASE.TITLE),
        });
    }
}

module.exports = CodeEditorShortcuts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
